What happens when you initialize a repository? Why do you need to do it?

        .git folder is created
        We start tracking a directory and subdirectory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

        The staging area is an intermediate area before committing.
        The working directory contains the hard drive files.
        The repository is the working directory tracked by git

How can you use the staging area to make sure you have one commit per logical
change?

        By running git diff --staged we can check the differences
        between the recent commit and the ones we are going to commit
        if we don't see a logical difference, no need to commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

        The branches help adding new features, new versions of the application
        Without touching the core working application.
        These branches would create new checkable versions of our files
        which are independent from the main files coded.

How do the diagrams help you visualize the branch structure?

        With the diagrams we can have an idea of when the branching started,
        what features are actually considered in a branch outside of master branch,
        And also helps us manage the project without damaging the master branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

        The result of merging two branches together is a combination of changes
        made in the merged branches, the master branch will be the resulted head
        which can access the previous commits of the branches merged.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
